// Generated by CoffeeScript 1.6.3
/*
TODO:
-
*/


(function() {
  var get_compatable, get_understands, groups, initialJSON, instantiate_groups, json, print_results, shuffle, stringified, testArray;

  initialJSON = require('./students.json');

  stringified = JSON.stringify(initialJSON);

  testArray = ['one', 'two', 'three', 'four', 'five'];

  shuffle = function(source_array) {
    var i, item, j, temp, _i, _len;
    for (i = _i = 0, _len = source_array.length; _i < _len; i = ++_i) {
      item = source_array[i];
      j = i + Math.floor(Math.random() * source_array.length - i);
      temp = source_array[j];
      source_array[j] = source_array[i];
      source_array[i] = temp;
    }
    return source_array;
  };

  instantiate_groups = function() {
    /* 
    seeds each of the appropriate number of groups with one student who understands
    */

    var group, i, _i, _j, _len, _ref, _results;
    for (i = _i = 0, _ref = initialJSON.groups; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      groups.push([]);
    }
    _results = [];
    for (_j = 0, _len = groups.length; _j < _len; _j++) {
      group = groups[_j];
      _results.push(group.push(get_understands()));
    }
    return _results;
  };

  get_understands = function() {
    /* 
    returns the first student that understands, removes from the array
    */

    var index, student, _i, _len, _ref;
    _ref = json.students;
    for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
      student = _ref[index];
      if (student.understands) {
        json.students.splice(index, 1);
        return student;
      }
    }
  };

  get_compatable = function(input_group) {
    /*
    Given a group, finds a child who doesn't fight, and who doesn't push the limit over two noisy children/group.
    */

    var entry, incompatable_list, student, _i, _j, _len, _len1, _ref;
    incompatable_list = [];
    for (_i = 0, _len = input_group.length; _i < _len; _i++) {
      student = input_group[_i];
      _ref = student.fights_with;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        entry = _ref[_j];
        incompatable_list.push(entry);
      }
    }
    return console.log(incompatable_list);
  };

  print_results = function() {
    /*
    prints remaining students, members of each group
    */

    var group, i, name, names, remaining, remaining_names, student, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _results;
    remaining = [];
    _ref = json.students;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      student = _ref[_i];
      remaining.push(student.name);
    }
    remaining_names = 'Remaining: ';
    for (_j = 0, _len1 = remaining.length; _j < _len1; _j++) {
      name = remaining[_j];
      remaining_names += name + ' ';
    }
    console.log(remaining_names);
    _results = [];
    for (i = _k = 0, _len2 = groups.length; _k < _len2; i = ++_k) {
      group = groups[i];
      for (_l = 0, _len3 = group.length; _l < _len3; _l++) {
        student = group[_l];
        names = student.name;
      }
      _results.push(console.log('Group ' + i + ': ' + names));
    }
    return _results;
  };

  /*
  */


  groups = [];

  json = JSON.parse(stringified);

  instantiate_groups();

  get_compatable(groups[0]);

}).call(this);
